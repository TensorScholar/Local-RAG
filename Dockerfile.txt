# Advanced Local RAG System Dockerfile
# Multi-stage build for optimized container size and security

# ===== Build Stage =====
FROM python:3.10-slim AS builder

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=1.6.1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY requirements.txt .

# Create virtual environment and install dependencies
RUN python -m venv /venv && \
    /venv/bin/pip install --upgrade pip && \
    /venv/bin/pip install --no-cache-dir -r requirements.txt && \
    /venv/bin/pip install --no-cache-dir gunicorn

# ===== Runtime Stage =====
FROM python:3.10-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONFAULTHANDLER=1 \
    PYTHONHASHSEED=random \
    PYTHONUNBUFFERED=1 \
    RAG_DOCKER_ENVIRONMENT=1 \
    PATH="/venv/bin:$PATH"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder stage
COPY --from=builder /venv /venv

# Copy application code
COPY . .

# Create required directories
RUN mkdir -p /data/vector_store /data/uploads /data/config /app/web/assets/img

# Create volume mount points
VOLUME ["/data/vector_store", "/data/uploads", "/data/config"]

# Create non-root user for security
RUN useradd -m rag-user && \
    chown -R rag-user:rag-user /app /data

# Switch to non-root user
USER rag-user

# Expose ports
EXPOSE 8000

# Set default environment variables
ENV RAG_CONFIG_PATH=/data/config \
    RAG_VECTOR_STORE_PATH=/data/vector_store \
    RAG_UPLOADS_PATH=/data/uploads \
    RAG_HOST=0.0.0.0 \
    RAG_PORT=8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${RAG_PORT}/api/health || exit 1

# Startup script
ENTRYPOINT ["/venv/bin/python", "start_rag.py"]
CMD ["--host", "0.0.0.0", "--port", "8000"]
